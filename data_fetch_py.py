# -*- coding: utf-8 -*-
"""data_fetch.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iyDfoPOn8PS7JUjG-4vjp5jwhPb80GfV
"""

import requests
import pandas as pd
from io import StringIO
import os

# === Alpha Vantage API Settings ===
api_key = 'YOUR_API_KEY'  # <- Replace this!
symbol = 'SPY'
function = 'TIME_SERIES_DAILY'
outputsize = 'full'
datatype = 'csv'

# === Directory to save the CSV data ===
save_dir = './data/'
os.makedirs(save_dir, exist_ok=True)

# === Construct API URL ===
url = (
    f'https://www.alphavantage.co/query?function={function}&symbol={symbol}'
    f'&apikey={api_key}&outputsize={outputsize}&datatype={datatype}'
)

print(f"Requesting full daily historical data for {symbol}...")

try:
    response = requests.get(url, timeout=15)

    if response.status_code == 200:
        # Check if API returned valid CSV header
        if not response.text.strip().startswith(('timestamp,', 'datetime,')):
            print("Unexpected response format:")
            print(response.text[:200])
            if "Note" in response.text:
                print("Note: You may have exceeded the API rate limit (5 calls per minute).")
        else:
            df = pd.read_csv(StringIO(response.text))

            # Rename timestamp/datetime column to 'timestamp'
            time_col = 'timestamp' if 'timestamp' in df.columns else 'datetime'
            df = df.rename(columns={time_col: 'timestamp'})

            required_cols = ['open', 'high', 'low', 'close', 'volume']
            if not all(col in df.columns for col in required_cols):
                raise ValueError(f"Missing expected columns. Columns found: {df.columns.tolist()}")

            # Parse and sort by date
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            df = df.sort_values('timestamp').reset_index(drop=True)

            # Add technical indicators
            df['daily_range'] = df['high'] - df['low']
            df['HL2'] = (df['high'] + df['low']) / 2
            df['OHLC4'] = (df['open'] + df['high'] + df['low'] + df['close']) / 4

            print(f"Downloaded {len(df)} rows.")
            print(f"Date range: {df['timestamp'].min().date()} to {df['timestamp'].max().date()}")

            # Save to CSV
            output_path = os.path.join(save_dir, f'{symbol}_Daily_Full.csv')
            df.to_csv(output_path, index=False)
            print(f"Data saved to: {output_path}")
    else:
        print(f"Request failed. Status code: {response.status_code}")
        print("Response preview:", response.text[:200])

except Exception as e:
    print("Exception occurred:", str(e))
    if "Timeout" in str(e):
        print("Hint: Check your internet connection or increase the timeout.")

print("\n Daily data fetch completed.")
